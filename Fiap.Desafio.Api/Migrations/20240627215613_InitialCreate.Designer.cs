// <auto-generated />
using System;
using Fiap.Desafio.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fiap.Desafio.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240627215613_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Fiap.Desafio.Api.Models.AlertStatusModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_alert");

                    b.Property<DateTime>("DateTimeAlert")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date_time_alert");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("alert_description");

                    b.Property<long>("IdRecord")
                        .HasColumnType("bigint")
                        .HasColumnName("id_record");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("send_notification");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("alert_status");

                    b.HasKey("Id")
                        .HasName("PK_alert_status");

                    b.HasIndex("IdRecord");

                    b.ToTable("alert_status", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.PermissionModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_permission");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("permission_name");

                    b.HasKey("Id");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.PersonModel", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("person_name");

                    b.HasKey("Email");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.RecordMeasurementModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_record");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("date_time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("location");

                    b.Property<double>("Measurement")
                        .HasColumnType("double")
                        .HasColumnName("measure");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_resource");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ResourceId");

                    b.ToTable("record_measurements", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.ResourceIndexModel", b =>
                {
                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_resource");

                    b.Property<double>("IndexMaximum")
                        .HasColumnType("double")
                        .HasColumnName("ind_maximum");

                    b.Property<double>("IndexMinimum")
                        .HasColumnType("double")
                        .HasColumnName("ind_minimum");

                    b.Property<double>("IndexNormal")
                        .HasColumnType("double")
                        .HasColumnName("ind_normal");

                    b.HasKey("ResourceId")
                        .HasName("PRIMARY");

                    b.ToTable("resource_index", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.ResourceModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_resource");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("resource_name");

                    b.Property<string>("UnityMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unity_measure");

                    b.HasKey("Id")
                        .HasName("id_record");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.UserModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwords");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_person");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("send_notification");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.UserPermissionModel", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_permission");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("user_permission", (string)null);
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.AlertStatusModel", b =>
                {
                    b.HasOne("Fiap.Desafio.Api.Models.RecordMeasurementModel", "RecordMeasurement")
                        .WithMany("AlertStatuses")
                        .HasForeignKey("IdRecord")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_alert_status_record_measurements");

                    b.Navigation("RecordMeasurement");
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.RecordMeasurementModel", b =>
                {
                    b.HasOne("Fiap.Desafio.Api.Models.ResourceModel", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.ResourceIndexModel", b =>
                {
                    b.HasOne("Fiap.Desafio.Api.Models.ResourceModel", "Resource")
                        .WithOne()
                        .HasForeignKey("Fiap.Desafio.Api.Models.ResourceIndexModel", "ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.UserModel", b =>
                {
                    b.HasOne("Fiap.Desafio.Api.Models.PersonModel", "Person")
                        .WithOne()
                        .HasForeignKey("Fiap.Desafio.Api.Models.UserModel", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("id_person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.UserPermissionModel", b =>
                {
                    b.HasOne("Fiap.Desafio.Api.Models.PermissionModel", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fiap.Desafio.Api.Models.UserModel", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.PermissionModel", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.RecordMeasurementModel", b =>
                {
                    b.Navigation("AlertStatuses");
                });

            modelBuilder.Entity("Fiap.Desafio.Api.Models.UserModel", b =>
                {
                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
